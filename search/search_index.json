{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SCLI # Simple Command Line Interface. It is built with cleo . Documentation : https://ozcanyarimdunya.github.io/scli/ Source code : https://github.com/ozcanyarimdunya/scli","title":"Home"},{"location":"#scli","text":"Simple Command Line Interface. It is built with cleo . Documentation : https://ozcanyarimdunya.github.io/scli/ Source code : https://github.com/ozcanyarimdunya/scli","title":"SCLI"},{"location":"getting-started/","text":"Clone project # git clone https://github.com/ozcanyarimdunya/scli.git cd scli/ Installation # make install Usage # python -m scli --help","title":"Getting started"},{"location":"getting-started/#clone-project","text":"git clone https://github.com/ozcanyarimdunya/scli.git cd scli/","title":"Clone project"},{"location":"getting-started/#installation","text":"make install","title":"Installation"},{"location":"getting-started/#usage","text":"python -m scli --help","title":"Usage"},{"location":"tutorial/00/","text":"Overview # First time your run project you should see below output Command python -m scli --help Output Scli version 0.1.0 USAGE scli [-h] [-q] [-v [<...>]] [-V] [--ansi] [--no-ansi] [-n] <command> [<arg1>] ... [<argN>] ARGUMENTS <command> The command to execute <arg> The arguments of the command GLOBAL OPTIONS -h (--help) Display this help message -q (--quiet) Do not output any message -v (--verbose) Increase the verbosity of messages: \"-v\" for normal output, \"-vv\" for more verbose output and \"-vvv\" for debug -V (--version) Display this application version --ansi Force ANSI output --no-ansi Disable ANSI output -n (--no-interaction) Do not ask any interactive question AVAILABLE COMMANDS about Shows information about scli check Checks the validity of the project help Display the manual of a command You can get help for one of available commands; Command python -m scli check --help # or python -m scli help check Output USAGE scli check [-f] OPTIONS -f (--force) Force check GLOBAL OPTIONS -h (--help) Display this help message -q (--quiet) Do not output any message -v (--verbose) Increase the verbosity of messages: \"-v\" for normal output, \"-vv\" for more verbose output and \"-vvv\" for debug -V (--version) Display this application version --ansi Force ANSI output --no-ansi Disable ANSI output -n (--no-interaction) Do not ask any interactive question DESCRIPTION Check the validity of the project","title":"Overview"},{"location":"tutorial/00/#overview","text":"First time your run project you should see below output Command python -m scli --help Output Scli version 0.1.0 USAGE scli [-h] [-q] [-v [<...>]] [-V] [--ansi] [--no-ansi] [-n] <command> [<arg1>] ... [<argN>] ARGUMENTS <command> The command to execute <arg> The arguments of the command GLOBAL OPTIONS -h (--help) Display this help message -q (--quiet) Do not output any message -v (--verbose) Increase the verbosity of messages: \"-v\" for normal output, \"-vv\" for more verbose output and \"-vvv\" for debug -V (--version) Display this application version --ansi Force ANSI output --no-ansi Disable ANSI output -n (--no-interaction) Do not ask any interactive question AVAILABLE COMMANDS about Shows information about scli check Checks the validity of the project help Display the manual of a command You can get help for one of available commands; Command python -m scli check --help # or python -m scli help check Output USAGE scli check [-f] OPTIONS -f (--force) Force check GLOBAL OPTIONS -h (--help) Display this help message -q (--quiet) Do not output any message -v (--verbose) Increase the verbosity of messages: \"-v\" for normal output, \"-vv\" for more verbose output and \"-vvv\" for debug -V (--version) Display this application version --ansi Force ANSI output --no-ansi Disable ANSI output -n (--no-interaction) Do not ask any interactive question DESCRIPTION Check the validity of the project","title":"Overview"},{"location":"tutorial/01/","text":"Add new command # Create a file with name your_command.py in scli/commands/ directory. Paste below code, your class name should be Command . # scli/commands/your_command.py from scli.core import BaseCommand class Command ( BaseCommand ): name = \"your_command\" description = \"A simple description\" help = \"\"\" A useful help message \"\"\" def handle ( self ): self . line ( \"It works!\" ) Add your command to INSTALLED_COMMANDS in scli/settings.py . INSTALLED_COMMANDS = [ ... # other commands \"your_command\" ] Now test it! python -m scli your_command Your should see below output. It works!","title":"Add new command"},{"location":"tutorial/01/#add-new-command","text":"Create a file with name your_command.py in scli/commands/ directory. Paste below code, your class name should be Command . # scli/commands/your_command.py from scli.core import BaseCommand class Command ( BaseCommand ): name = \"your_command\" description = \"A simple description\" help = \"\"\" A useful help message \"\"\" def handle ( self ): self . line ( \"It works!\" ) Add your command to INSTALLED_COMMANDS in scli/settings.py . INSTALLED_COMMANDS = [ ... # other commands \"your_command\" ] Now test it! python -m scli your_command Your should see below output. It works!","title":"Add new command"},{"location":"tutorial/02/","text":"Add argument and option # Open your command file scli/commands/your_command.py and paste below code. # scli/commands/your_command.py from scli.core import BaseCommand from scli.core import argument from scli.core import option class Command ( BaseCommand ): name = \"your_command\" description = \"A simple description\" help = \"\"\" A useful help message \"\"\" arguments = [ argument ( name = \"name\" , description = \"Argument name\" , ), ] options = [ option ( long_name = \"create\" , short_name = \"c\" , description = \"Check option\" , flag = True , ) ] def handle ( self ): name = self . argument ( \"name\" ) check = self . option ( \"create\" ) if check : self . comment ( \"User with name {} created.\" . format ( name )) else : self . comment ( \"User with name {} doesn't created.\" . format ( name )) Command python -m scli your_command ozcan --create # or python -m scli your_command ozcan -c Output User with name ozcan created.","title":"Add argument and option"},{"location":"tutorial/02/#add-argument-and-option","text":"Open your command file scli/commands/your_command.py and paste below code. # scli/commands/your_command.py from scli.core import BaseCommand from scli.core import argument from scli.core import option class Command ( BaseCommand ): name = \"your_command\" description = \"A simple description\" help = \"\"\" A useful help message \"\"\" arguments = [ argument ( name = \"name\" , description = \"Argument name\" , ), ] options = [ option ( long_name = \"create\" , short_name = \"c\" , description = \"Check option\" , flag = True , ) ] def handle ( self ): name = self . argument ( \"name\" ) check = self . option ( \"create\" ) if check : self . comment ( \"User with name {} created.\" . format ( name )) else : self . comment ( \"User with name {} doesn't created.\" . format ( name )) Command python -m scli your_command ozcan --create # or python -m scli your_command ozcan -c Output User with name ozcan created.","title":"Add argument and option"},{"location":"tutorial/03/","text":"What's next? # With cleo you can create these types of output; styled progress bar table Take a look cleo documentation for more.","title":"What's next?"},{"location":"tutorial/03/#whats-next","text":"With cleo you can create these types of output; styled progress bar table Take a look cleo documentation for more.","title":"What's next?"}]}